namespace matrix_dotnet.Api;

using Refit;


public record ErrorResponse(string errcode, string error, bool? soft_logout = null);

/// <summary><see cref="IMatrixApi.GetJoinedRooms"/></summary>
public record JoinedRoomsResponse(Api.RoomID[] joined_rooms);

/// <summary><see cref="IMatrixApi.Refresh"/></summary>
public record RefreshRequest(string refresh_token);
/// <summary><see cref="IMatrixApi.Refresh"/></summary>
public record RefreshResponse(string access_token, int? expires_in_ms, string? refresh_token);


public record SyncResponse(
	AccountData account_data,
	// DeviceLists device_lists, // NOT IMPLEMENTED: E2EE
	// Dictionary<string, integer> device_one_time_keys_count, // NOT IMPLEMENTED: E2EE
	string next_batch,
	Presence? presence,
	Rooms? rooms,
	ToDevice? to_device
);

public enum SetPresence { offline, online, unavailable }

public enum Dir { f, b };

public record RoomMessagesResponse(
	ClientEvent[] chunk,
	string? end,
	string start,
	ClientEvent[]? state
);

public record RedactRequest(
	string? reason
);

/// <summary>
/// The IMatrixApi interface represents API endpoints directly and its implementation gets generated by Refit.
/// </summary>
public interface IMatrixApi {

	/// <summary> Perform login to receive an access and an optional refresh token.
	/// <see href="https://spec.matrix.org/v1.11/client-server-api/#post_matrixclientv3login"/>
	/// </summary>
	[Post("/_matrix/client/v3/login")]
	public Task<LoginResponse> Login(LoginRequest request);

	/// <summary> Use a refresh token to reaquire a new access token </summary>
	[Post("/_matrix/client/v3/refresh")]
	public Task<RefreshResponse> Refresh(RefreshRequest request);

	/// <summary> Get a list of IDs of currently joined rooms. </summary>
	[Get("/_matrix/client/v3/joined_rooms")]
	[Headers("Authorization: Bearer")]
	public Task<JoinedRoomsResponse> GetJoinedRooms();


	/// <summary>Send a raw event to a room. Can be of any type.</summary>
	/// <returns> The <c>event_id</c> of the sent event </returns>
	/// <param name="body">See <see cref="EventContent"/></param>
	[Put("/_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId}")]
	[Headers("Authorization: Bearer")]
	public Task<SendEventResponse> SendEvent<TEvent>(RoomID roomId, string eventType, string txnId, TEvent body) where TEvent : EventContent;

	/// <summary> Sync events. See <see href="https://spec.matrix.org/v1.11/client-server-api/#syncing"/></summary>
	[Get("/_matrix/client/v3/sync")]
	[Headers("Authorization: Bearer")]
	public Task<SyncResponse> Sync(
		string? filter = null,
		string full_state = "false", // TODO: false.ToString() == "False" and matrix doesn't like that
		SetPresence set_presence = SetPresence.offline,
		string? since = null,
		int timeout = 0
	);

	/// <summary> Get messages for particular room. See <see href="https://spec.matrix.org/v1.11/client-server-api/#syncing"/> and <see href="https://spec.matrix.org/v1.11/client-server-api/#get_matrixclientv3roomsroomidmessages"/></summary>
	[Get("/_matrix/client/v3/rooms/{roomId}/messages")]
	[Headers("Authorization: Bearer")]
	public Task<RoomMessagesResponse> GetRoomMessages(
		RoomID roomId,
		Dir dir,
		string? filter = null,
		string? from = null,
		int? limit = null,
		string? to = null
	);

	[Get("/_matrix/media/v3/download/{serverName}/{mediaId}")]
	public Task<Stream> OldDownloadMedia(string serverName, string mediaId, int? timeout_ms = null);

	[Get("/_matrix/client/v1/media/download/{serverName}/{mediaId}")]
	[Headers("Authorization: Bearer")]
	public Task<Stream> DownloadMedia(string serverName, string mediaId, int? timeout_ms = null);

	[Put("/_matrix/client/v3/rooms/{roomId}/redact/{eventId}/{txnId}")]
	[Headers("Authorization: Bearer")]
	public Task<RedactResponse> Redact(EventID eventId, RoomID roomId, string txnId, RedactRequest? request);

	[Post("/_matrix/client/v3/createRoom")]
	[Headers("Authorization: Bearer")]
	public Task<RoomCreationResponse> CreateRoom(RoomCreationRequest request);

	[Post("/_matrix/client/v3/rooms/{roomId}/invite")]
	[Headers("Authorization: Bearer")]
	public Task Invite(RoomID roomID, InviteRequest request);

	[Post("/_matrix/client/v3/join/{roomIdOrAlias}")]
	[Headers("Authorization: Bearer")]
	public Task<JoinResponse> Join(string roomIdOrAlias, [Body] JoinRequest request, string[]? server_name = null);
	
	public async Task<JoinResponse> Join(RoomID roomId, JoinRequest request, string[]? server_name = null) {
		return await Join(roomId.ToString(), request, server_name);
	}

	[Post("/_matrix/client/v3/rooms/{roomId}/leave")]
	[Headers("Authorization: Bearer")]
	public Task Leave(RoomID roomId, LeaveRequest request);


}


